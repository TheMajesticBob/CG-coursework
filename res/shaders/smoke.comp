#version 440 core

// Process particles in blocks of 128
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
// SSBO binding
layout(std430, binding = 0) buffer PositionBuffer { vec4 positions[]; };
layout(std430, binding = 1) buffer VelocityBuffer { vec4 velocities[]; };

uniform bool isEmitting;

// Particle vars
uniform float sizeMin;
uniform float sizeMax;
uniform float speedMin;
uniform float speedMax;

uniform vec3 initialDirection;

uniform mat4 MVP;
uniform float delta_time;
uniform float time;

uniform vec3 max_dims;

uniform vec4 windDirection;

float hash( float n )
{
    return fract(sin(n)*43758.5453);
}

void SpawnNewParticle(in uint index, out vec4 new_pos, out vec4 vel)
{
	float noise;
	// Calculate random 0, 1 float
	noise = ( hash( time * 498426.123 ) + 1.0 ) / 2.0;
	float newSize = noise * ( sizeMax - sizeMin ) + sizeMin;

	// Calculate random -1, 1 float
	noise = hash( newSize * time * 9745123.11 );
	float noiseX = noise * max_dims.x;

	// Calculate random -1, 1 float
	noise = hash( noiseX * delta_time * 9856423.7 );
	float noiseZ = noise * max_dims.z * 0.5;

	new_pos = vec4( vec3(noiseX, -(max_dims.y / 4.0 + newSize * 2.0), noiseZ), newSize ); 

	vel = vec4( initialDirection * ( ( hash( newSize * delta_time + noiseX + 1.4 * noiseZ ) + 1.0 ) / 2.0 * ( speedMax - speedMin ) + speedMin ), 0.0 );
}

void main() 
{
	uint index = gl_GlobalInvocationID.x;

	// Read the current position and velocity from the buffers
	vec4 vel = velocities[index];
	vec4 pos = positions[index];

	float forceStrength = length(vel);

	// Upadte new_pos with velocity and delta_tims
	vec4 new_pos = vec4( pos.xyz + vel.xyz * delta_time, max( pos.w, 0.6 ) );
	// new_pos.w = mix( pos.w, vel.w, delta_time / 10.0 );

	// When a particle leaves the bounding box move it downwards and generate a new size for it
	if(isEmitting && (new_pos.y - pos.w * 2.0 > max_dims.y / 4.0 || new_pos.w <= 0.05)) {
		SpawnNewParticle(index, new_pos, vel);
	}

	// Store the new position and velocity back into the buffers
	velocities[index] = vel; // vec4( mix( vel.xyz, normalize(vel.xyz + windDirection * windStrength) * forceStrength, 0.01 ), 0.0 );
	positions[index] = new_pos;
}